#############################################################################
##  v      #                   The Coq Proof Assistant                     ##
## <O___,, #                INRIA - CNRS - LIX - LRI - PPS                 ##
##   \VV/  #                                                               ##
##    //   #  Makefile automagically generated by coq_makefile V8.5        ##
#############################################################################

# WARNING
#
# This Makefile has been automagically generated
# Edit at your own risks !
#
# END OF WARNING

#
# This Makefile was generated by the command line :
# coq_makefile -R . Lvc extraction GVN.v LivenessAnalysis.v Fresh.v Isa/Exp.v Isa/Val.v Isa/MoreExp.v IL/Var.v IL/EventsActivated.v IL/Patterns.v IL/Env.v IL/IL.v IL/StateType.v IL/LabelsDefined.v IL/Annotation.v IL/Events.v IL/ILN.v RenamedApart_Liveness.v ValueOpts.v RenameApart.v DVE.v EnvTy.v Coherence/DelocationValidator.v Coherence/Restrict.v Coherence/Allocation.v Coherence/Coherence.v Coherence/AllocationAlgo.v Coherence/DelocationAlgo.v Coherence/Delocation.v paco/pacodef.v paco/paco2.v paco/paco7.v paco/paco6.v paco/paco4.v paco/paco11.v paco/paco0.v paco/paco8.v paco/paco15.v paco/paco1.v paco/tutorial.v paco/paco3.v paco/pacotac.v paco/hpattern.v paco/paco10.v paco/paco.v paco/paco12.v paco/paco9.v paco/paco14.v paco/pacotacuser.v paco/paco5.v paco/paconotation.v paco/paco13.v Infra/Status.v Infra/Drop.v Infra/LengthEq.v Infra/Relations.v Infra/CoreTactics.v Infra/DecSolve.v Infra/AllInRel.v Infra/Relations2.v Infra/Computable.v Infra/OptionMap.v Infra/Get.v Infra/AutoIndTac.v Infra/Bootstrap.v Infra/Option.v Infra/EqDec.v Infra/Util.v Infra/Sublist.v Infra/MoreList.v EAE.v Eqn.v CopyPropagation.v Compiler.v Filter.v RenamedApart.v Analysis.v LivenessValidators.v Liveness.v Equiv/Equiv.v Equiv/CtxEq.v Equiv/Sim.v Equiv/TraceEquiv.v Equiv/Bisim.v Alpha.v Lattice.v TransVal/ILFtoSMT.v TransVal/ComputeProps.v TransVal/nofun.v TransVal/orderedBitvec.v TransVal/freeVars.v TransVal/tvalTactics.v TransVal/CombineEnv.v TransVal/bitvec.v TransVal/Compute.v TransVal/noGoto.v TransVal/smt.v TransVal/Guards.v TransVal/TUtil.v TransVal/GuardProps.v TransVal/transval.v ParallelMove.v Libs/PartialOrder.v ConstantPropagation.v ConstantPropagationAnalysis.v Constr/CSetTac.v Constr/SetOperations.v Constr/MapLookupList.v Constr/MapAgreement.v Constr/MapUpdate.v Constr/CSetGet.v Constr/MapUpdateList.v Constr/CSetBasic.v Constr/CSetDisjoint.v Constr/MapLookup.v Constr/MapBasics.v Constr/MapComposition.v Constr/MapInjectivity.v Constr/CMap.v Constr/CSet.v Constr/MapAgreeSet.v Constr/CSetComputable.v Constr/MapInverse.v Constr/Map.v Constr/CSetCases.v Constr/CSetNotation.v 
#

.DEFAULT_GOAL := all

# This Makefile may take arguments passed as environment variables:
# COQBIN to specify the directory where Coq binaries resides;
# TIMECMD set a command to log .v compilation time;
# TIMED if non empty, use the default time command as TIMECMD;
# ZDEBUG/COQDEBUG to specify debug flags for ocamlc&ocamlopt/coqc;
# DSTROOT to specify a prefix to install path.

# Here is a hack to make $(eval $(shell works:
define donewline


endef
includecmdwithout@ = $(eval $(subst @,$(donewline),$(shell { $(1) | tr -d '\r' | tr '\n' '@'; })))
$(call includecmdwithout@,$(COQBIN)coqtop -config)

TIMED=
TIMECMD=
STDTIME?=/usr/bin/time -f "$* (user: %U mem: %M ko)"
TIMER=$(if $(TIMED), $(STDTIME), $(TIMECMD))

vo_to_obj = $(addsuffix .o,\
  $(filter-out Warning: Error:,\
  $(shell $(COQBIN)coqtop -q -noinit -batch -quiet -print-mod-uid $(1))))

##########################
#                        #
# Libraries definitions. #
#                        #
##########################

COQLIBS?=\
  -R "." Lvc
COQDOCLIBS?=\
  -R "." Lvc

##########################
#                        #
# Variables definitions. #
#                        #
##########################


OPT?=
COQDEP?="$(COQBIN)coqdep" -c
COQFLAGS?=-q $(OPT) $(COQLIBS) $(OTHERFLAGS) $(COQ_XML)
COQCHKFLAGS?=-silent -o
COQDOCFLAGS?=-interpolate -utf8
COQC?=$(TIMER) "$(COQBIN)coqc"
GALLINA?="$(COQBIN)gallina"
COQDOC?="$(COQBIN)coqdoc"
COQCHK?="$(COQBIN)coqchk"
COQMKTOP?="$(COQBIN)coqmktop"

##################
#                #
# Install Paths. #
#                #
##################

ifdef USERINSTALL
XDG_DATA_HOME?="$(HOME)/.local/share"
COQLIBINSTALL=$(XDG_DATA_HOME)/coq
COQDOCINSTALL=$(XDG_DATA_HOME)/doc/coq
else
COQLIBINSTALL="${COQLIB}user-contrib"
COQDOCINSTALL="${DOCDIR}user-contrib"
COQTOPINSTALL="${COQLIB}toploop"
endif

######################
#                    #
# Files dispatching. #
#                    #
######################

VFILES:=GVN.v\
  LivenessAnalysis.v\
  Fresh.v\
  Isa/Exp.v\
  Isa/Val.v\
  Isa/MoreExp.v\
  IL/Var.v\
  IL/EventsActivated.v\
  IL/Patterns.v\
  IL/Env.v\
  IL/IL.v\
  IL/StateType.v\
  IL/LabelsDefined.v\
  IL/Annotation.v\
  IL/Events.v\
  IL/ILN.v\
  RenamedApart_Liveness.v\
  ValueOpts.v\
  RenameApart.v\
  DVE.v\
  EnvTy.v\
  Coherence/DelocationValidator.v\
  Coherence/Restrict.v\
  Coherence/Allocation.v\
  Coherence/Coherence.v\
  Coherence/AllocationAlgo.v\
  Coherence/DelocationAlgo.v\
  Coherence/Delocation.v\
  paco/pacodef.v\
  paco/paco2.v\
  paco/paco7.v\
  paco/paco6.v\
  paco/paco4.v\
  paco/paco11.v\
  paco/paco0.v\
  paco/paco8.v\
  paco/paco15.v\
  paco/paco1.v\
  paco/tutorial.v\
  paco/paco3.v\
  paco/pacotac.v\
  paco/hpattern.v\
  paco/paco10.v\
  paco/paco.v\
  paco/paco12.v\
  paco/paco9.v\
  paco/paco14.v\
  paco/pacotacuser.v\
  paco/paco5.v\
  paco/paconotation.v\
  paco/paco13.v\
  Infra/Status.v\
  Infra/Drop.v\
  Infra/LengthEq.v\
  Infra/Relations.v\
  Infra/CoreTactics.v\
  Infra/DecSolve.v\
  Infra/AllInRel.v\
  Infra/Relations2.v\
  Infra/Computable.v\
  Infra/OptionMap.v\
  Infra/Get.v\
  Infra/AutoIndTac.v\
  Infra/Bootstrap.v\
  Infra/Option.v\
  Infra/EqDec.v\
  Infra/Util.v\
  Infra/Sublist.v\
  Infra/MoreList.v\
  EAE.v\
  Eqn.v\
  CopyPropagation.v\
  Compiler.v\
  Filter.v\
  RenamedApart.v\
  Analysis.v\
  LivenessValidators.v\
  Liveness.v\
  Equiv/Equiv.v\
  Equiv/CtxEq.v\
  Equiv/Sim.v\
  Equiv/TraceEquiv.v\
  Equiv/Bisim.v\
  Alpha.v\
  Lattice.v\
  TransVal/ILFtoSMT.v\
  TransVal/ComputeProps.v\
  TransVal/nofun.v\
  TransVal/orderedBitvec.v\
  TransVal/freeVars.v\
  TransVal/tvalTactics.v\
  TransVal/CombineEnv.v\
  TransVal/bitvec.v\
  TransVal/Compute.v\
  TransVal/noGoto.v\
  TransVal/smt.v\
  TransVal/Guards.v\
  TransVal/TUtil.v\
  TransVal/GuardProps.v\
  TransVal/transval.v\
  ParallelMove.v\
  Libs/PartialOrder.v\
  ConstantPropagation.v\
  ConstantPropagationAnalysis.v\
  Constr/CSetTac.v\
  Constr/SetOperations.v\
  Constr/MapLookupList.v\
  Constr/MapAgreement.v\
  Constr/MapUpdate.v\
  Constr/CSetGet.v\
  Constr/MapUpdateList.v\
  Constr/CSetBasic.v\
  Constr/CSetDisjoint.v\
  Constr/MapLookup.v\
  Constr/MapBasics.v\
  Constr/MapComposition.v\
  Constr/MapInjectivity.v\
  Constr/CMap.v\
  Constr/CSet.v\
  Constr/MapAgreeSet.v\
  Constr/CSetComputable.v\
  Constr/MapInverse.v\
  Constr/Map.v\
  Constr/CSetCases.v\
  Constr/CSetNotation.v

ifneq ($(filter-out archclean clean cleanall printenv,$(MAKECMDGOALS)),)
-include $(addsuffix .d,$(VFILES))
else
ifeq ($(MAKECMDGOALS),)
-include $(addsuffix .d,$(VFILES))
endif
endif

.SECONDARY: $(addsuffix .d,$(VFILES))

VO=vo
VOFILES:=$(VFILES:.v=.$(VO))
GLOBFILES:=$(VFILES:.v=.glob)
GFILES:=$(VFILES:.v=.g)
HTMLFILES:=$(VFILES:.v=.html)
GHTMLFILES:=$(VFILES:.v=.g.html)
OBJFILES=$(call vo_to_obj,$(VOFILES))
ALLNATIVEFILES=$(OBJFILES:.o=.cmi) $(OBJFILES:.o=.cmo) $(OBJFILES:.o=.cmx) $(OBJFILES:.o=.cmxs)
NATIVEFILES=$(foreach f, $(ALLNATIVEFILES), $(wildcard $f))
ifeq '$(HASNATDYNLINK)' 'true'
HASNATDYNLINK_OR_EMPTY := yes
else
HASNATDYNLINK_OR_EMPTY :=
endif

#######################################
#                                     #
# Definition of the toplevel targets. #
#                                     #
#######################################

all: $(VOFILES) ./extraction

quick: $(VOFILES:.vo=.vio)

vio2vo:
	$(COQC) $(COQDEBUG) $(COQFLAGS) -schedule-vio2vo $(J) $(VOFILES:%.vo=%.vio)
checkproofs:
	$(COQC) $(COQDEBUG) $(COQFLAGS) -schedule-vio-checking $(J) $(VOFILES:%.vo=%.vio)
gallina: $(GFILES)

html: $(GLOBFILES) $(VFILES)
	- mkdir -p html
	$(COQDOC) -toc $(COQDOCFLAGS) -html $(COQDOCLIBS) -d html $(VFILES)

gallinahtml: $(GLOBFILES) $(VFILES)
	- mkdir -p html
	$(COQDOC) -toc $(COQDOCFLAGS) -html -g $(COQDOCLIBS) -d html $(VFILES)

all.ps: $(VFILES)
	$(COQDOC) -toc $(COQDOCFLAGS) -ps $(COQDOCLIBS) -o $@ `$(COQDEP) -sort -suffix .v $^`

all-gal.ps: $(VFILES)
	$(COQDOC) -toc $(COQDOCFLAGS) -ps -g $(COQDOCLIBS) -o $@ `$(COQDEP) -sort -suffix .v $^`

all.pdf: $(VFILES)
	$(COQDOC) -toc $(COQDOCFLAGS) -pdf $(COQDOCLIBS) -o $@ `$(COQDEP) -sort -suffix .v $^`

all-gal.pdf: $(VFILES)
	$(COQDOC) -toc $(COQDOCFLAGS) -pdf -g $(COQDOCLIBS) -o $@ `$(COQDEP) -sort -suffix .v $^`

validate: $(VOFILES)
	$(COQCHK) $(COQCHKFLAGS) $(COQLIBS) $(notdir $(^:.vo=))

beautify: $(VFILES:=.beautified)
	for file in $^; do mv $${file%.beautified} $${file%beautified}old && mv $${file} $${file%.beautified}; done
	@echo 'Do not do "make clean" until you are sure that everything went well!'
	@echo 'If there were a problem, execute "for file in $$(find . -name \*.v.old -print); do mv $${file} $${file%.old}; done" in your shell/'

.PHONY: all archclean beautify byte clean cleanall gallina gallinahtml html install install-doc install-natdynlink install-toploop opt printenv quick uninstall userinstall validate vio2vo ./extraction

###################
#                 #
# Subdirectories. #
#                 #
###################

./extraction: Compiler.vo
	+cd "./extraction" && $(MAKE) all

####################
#                  #
# Special targets. #
#                  #
####################

byte:
	$(MAKE) all "OPT:=-byte"

opt:
	$(MAKE) all "OPT:=-opt"

userinstall:
	+$(MAKE) USERINSTALL=true install

install:
	cd "." && for i in $(VOFILES) $(VFILES) $(GLOBFILES) $(NATIVEFILES) $(CMOFILES) $(CMIFILES) $(CMAFILES); do \
	 install -d "`dirname "$(DSTROOT)"$(COQLIBINSTALL)/Lvc/$$i`"; \
	 install -m 0644 $$i "$(DSTROOT)"$(COQLIBINSTALL)/Lvc/$$i; \
	done
	+cd ./extraction && $(MAKE) DSTROOT="$(DSTROOT)" INSTALLDEFAULTROOT="$(INSTALLDEFAULTROOT)/./extraction" install

install-doc:
	install -d "$(DSTROOT)"$(COQDOCINSTALL)/Lvc/html
	for i in html/*; do \
	 install -m 0644 $$i "$(DSTROOT)"$(COQDOCINSTALL)/Lvc/$$i;\
	done

uninstall_me.sh: Makefile
	echo '#!/bin/sh' > $@
	printf 'cd "$${DSTROOT}"$(COQLIBINSTALL)/Lvc && rm -f $(VOFILES) $(VFILES) $(GLOBFILES) $(NATIVEFILES) $(CMOFILES) $(CMIFILES) $(CMAFILES) && find . -type d -and -empty -delete\ncd "$${DSTROOT}"$(COQLIBINSTALL) && find "Lvc" -maxdepth 0 -and -empty -exec rmdir -p \{\} \;\n' >> "$@"
	printf 'cd "$${DSTROOT}"$(COQDOCINSTALL)/Lvc \\\n' >> "$@"
	printf '&& rm -f $(shell find "html" -maxdepth 1 -and -type f -print)\n' >> "$@"
	printf 'cd "$${DSTROOT}"$(COQDOCINSTALL) && find Lvc/html -maxdepth 0 -and -empty -exec rmdir -p \{\} \;\n' >> "$@"
	chmod +x $@

uninstall: uninstall_me.sh
	sh $<

clean::
	rm -f $(OBJFILES) $(OBJFILES:.o=.native) $(NATIVEFILES)
	find . -name .coq-native -type d -empty -delete
	rm -f $(VOFILES) $(VOFILES:.vo=.vio) $(GFILES) $(VFILES:.v=.v.d) $(VFILES:=.beautified) $(VFILES:=.old)
	rm -f all.ps all-gal.ps all.pdf all-gal.pdf all.glob $(VFILES:.v=.glob) $(VFILES:.v=.tex) $(VFILES:.v=.g.tex) all-mli.tex
	- rm -rf html mlihtml uninstall_me.sh
	+cd ./extraction && $(MAKE) clean

cleanall:: clean
	rm -f $(patsubst %.v,.%.aux,$(VFILES))

archclean::
	rm -f *.cmx *.o
	+cd ./extraction && $(MAKE) archclean

printenv:
	@"$(COQBIN)coqtop" -config
	@echo 'CAMLC =	$(CAMLC)'
	@echo 'CAMLOPTC =	$(CAMLOPTC)'
	@echo 'PP =	$(PP)'
	@echo 'COQFLAGS =	$(COQFLAGS)'
	@echo 'COQLIBINSTALL =	$(COQLIBINSTALL)'
	@echo 'COQDOCINSTALL =	$(COQDOCINSTALL)'

###################
#                 #
# Implicit rules. #
#                 #
###################

$(VOFILES): %.vo: %.v
	$(COQC) $(COQDEBUG) $(COQFLAGS) $*

$(GLOBFILES): %.glob: %.v
	$(COQC) $(COQDEBUG) $(COQFLAGS) $*

$(VFILES:.v=.vio): %.vio: %.v
	$(COQC) -quick $(COQDEBUG) $(COQFLAGS) $*

$(GFILES): %.g: %.v
	$(GALLINA) $<

$(VFILES:.v=.tex): %.tex: %.v
	$(COQDOC) $(COQDOCFLAGS) -latex $< -o $@

$(HTMLFILES): %.html: %.v %.glob
	$(COQDOC) $(COQDOCFLAGS) -html $< -o $@

$(VFILES:.v=.g.tex): %.g.tex: %.v
	$(COQDOC) $(COQDOCFLAGS) -latex -g $< -o $@

$(GHTMLFILES): %.g.html: %.v %.glob
	$(COQDOC) $(COQDOCFLAGS)  -html -g $< -o $@

$(addsuffix .d,$(VFILES)): %.v.d: %.v
	$(COQDEP) $(COQLIBS) "$<" > "$@" || ( RV=$$?; rm -f "$@"; exit $${RV} )

$(addsuffix .beautified,$(VFILES)): %.v.beautified:
	$(COQC) $(COQDEBUG) $(COQFLAGS) -beautify $*

# WARNING
#
# This Makefile has been automagically generated
# Edit at your own risks !
#
# END OF WARNING

